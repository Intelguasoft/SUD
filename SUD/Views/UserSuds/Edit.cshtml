@model SUD.Models.UserSud
@{
    ViewBag.Title = "Usuario";
    ViewBag.Message = "Modificar Usuario";
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()


    <!-- Content Header (Page header) -->
    <section class="content-header">
        <h1>
            <!--aqui va el titulo de la pagina que se va a mostrar, como el siguiente ejemplo -->
            @ViewBag.Title - <small>@ViewBag.Message</small>
        </h1>
        <ol class="breadcrumb">
            <li><a href="@Url.Action("Index")"><i class="fa fa-user"></i>  Usuarios</a></li>
            <li class="active">Modificar</li>
        </ol>
    </section>
    <!-- Main content -->
    <section class="content">
        <!-- Default box -->
        <div class="box">
            <div class="box-header with-border">
                <h3 class="box-title">¿Desea hacer algún cambio al usuario seleccionado?</h3>
                <div class="box-tools pull-right">
                    <button type="button" class="btn btn-box-tool" data-widget="collapse" data-toggle="tooltip"
                            title="Collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                    <button type="button" class="btn btn-box-tool" data-widget="remove" data-toggle="tooltip" title="Remove" disabled>
                        <i class="fa fa-times"></i>
                    </button>
                </div>
            </div>
            <div class="box-body">
                <!-- Aca se incluye todo el contenido de la pagina que se desea mostrar -->
                <!-- por ejemplo el index/tabla de algun recurso -->
                <div class="row">
                    <div class="col-xs-12 col-md-4">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="form-group">
                            @Html.HiddenFor(model => model.UserSudId)
                            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "c" })
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-xs-12 col-md-4">
                        @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "" })
                        <div class="form-group">
                            @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-xs-12 col-md-4">
                        @Html.LabelFor(model => model.RolId, htmlAttributes: new { @class = "" })
                        <div class="form-group">
                            @Html.DropDownList("RolId", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.RolId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-xs-12 col-md-4">
                        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "" })
                        <div class="form-group">
                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-xs-12 col-md-4">
                        @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "" })
                        <div class="form-group">
                            @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-xs-12 col-md-4">
                        @Html.LabelFor(model => model.ModificationDatePassword, htmlAttributes: new { @class = "" })
                        <div class="form-group">
                            @Html.EditorFor(model => model.ModificationDatePassword, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ModificationDatePassword, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-xs-12 col-md-4">

                        <div class="form-group">
                            @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "" })
                            @Html.EditorFor(model => model.Status, new { htmlAttributes = new { @class = "col-md-1 " } })
                            @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                        </div>

                    </div>
                </div>
                <div class="row">
                    <div class="col-xs-12 col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Image, htmlAttributes: new { @class = "control-label col-md-2" })

                            <div class="fileinput fileinput-new input-group" data-provides="fileinput">
                                <div class="form-control" data-trigger="fileinput"><i class="glyphicon glyphicon-file fileinput-exists"></i> <span class="fileinput-filename"></span></div>
                                <span class="input-group-addon btn btn-default btn-file"><span class="fileinput-new">Select file</span><span class="fileinput-exists">Change</span><input type="file" id="file" name="FotografiaFile"></span>
                                <a id="buttonr" href="#" class="input-group-addon btn btn-default fileinput-exists" data-dismiss="fileinput">Remove</a>
                            </div>
                            <hr>
                            <div id="preview"></div>

                            @Html.ValidationMessageFor(model => model.Image, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
            <!-- /.box-body -->
            <div class="box-footer">
                <!-- Aca se incluye aquellas acciones relacionadas con lo antes mostrado -->
                <!-- por ejemplo botones de facturacion, exportar a excel/pdf o similares -->
                <div class="row">
                    <div class="trans text-center">
                        <div class="form-group">
                            <a href="@Url.Action("Index")" class="btn btn-success"> <i class="fa fa-undo" aria-hidden="true"></i> Regresar</a>
                            <button type="submit" class="btn btn-info">
                                <i class="fa fa-floppy-o" aria-hidden="true"></i> Guardar
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <!-- /.box-footer-->
        </div>
        <!-- /.box -->
    </section>
    <!-- /.content -->
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>

        document.getElementById("file").onchange = function (e) {
            let reader = new FileReader();

            reader.onload = function () {
                let preview = document.getElementById('preview'),
                    image = document.createElement('img');

                image.src = reader.result;

                preview.innerHTML = '';
                preview.append(image);
            };

            reader.readAsDataURL(e.target.files[0]);
        }

        $("#buttonr").click(function () {
            let preview = document.getElementById('preview');
            preview.innerHTML = '';
        });

    </script>
}